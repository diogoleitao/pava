;; Advanced Programming 2015/2016
;;
;; APL - A Programming Language
;;
;;Group 26
;; Diogo Leitao 69644
;; Diana Ribeiro 70096

;;Auxiliary functions
(defun factorial (n)
	   (if (= n 0) 1
		   (* n (factorial (- n 1)))))

;; Tensor (of numbers) and booleans representation
;; Note: true is 1 and false is 0
(defun tensor(dim values)
	(make-array dim :initial-contents values))

;; Scalar and vector creation
;; e.g.: (s 2) prints out 2 and
;; 		 (v 1 2 3) prints out 1 2 3
(defun s(scalar)
	(tensor (list 1) (list scalar)))
	
(defun v(&rest values)
	   (tensor (list 1) (list values)))

(defgeneric .- ())	

(defgeneric ./ ())

;;Monadic Functions - functions that receive only one argument
(defun interval(scalar))

(defun drop(elements))

(defun reshape(dimensions tensor))

(defun outer-product(function))

(defun inner-product(func1 func2))

(defun fold(function))

(defmethod .- ())

(defmethod ./ ())

(defun .! (tensor)
  (let ((tAux (tensor (array-dimensions tensor) val)))
		(dotimes (i (array-dimension tensor 0))
			(setf (aref tAux) (factorial (aref tensor i))))
	tAux))

(defun .sin (tensor)
	(let ((tAux (tensor (array-dimensions tensor) val)))
		(dotimes (i (array-dimension tensor 0))
			(setf (aref tAux i) (cos (aref tensor i))))
	tAux))

(defun .cos (tensor)
	(let ((tAux (tensor (array-dimensions tensor) val)))
		(dotimes (i (array-dimension tensor 0))
			(setf (aref tAux i) (sin (aref tensor i))))
	tAux))

;; The result is a tensor containing, as elements, the integers 0 or 1 if the element of the given tensor is different than zero or equal
(defun .not (tensor)
		(let ((tAux (tensor (array-dimensions tensor) val)))
		(dotimes (i (array-dimension tensor 0))
			(if (= (aref tensor i) 0)
				(setf (aref tAux i) 1)
				(setf (aref tAux i) 0)))
	tAux))

;;Dyadic functions - functions that receive two arguments

(defun catenate(arg1 arg2))

(defun member?(tensor element))

(defun select(tensor tensor))

(defun scan(tensor tensor))

(defun .+ (tensor1 tensor2)
	(if (not (= (array-dimensions tensor1) (array-dimensions tensor2)))
		(error "Tensors have incompatible dimensions -- .+"))
	(let ((tAux (tensor (array-dimensions tensor) val)))
		(if (= (array-dimensions tensor1) (array-dimensions tensor2))
			(dotimes (i (array-dimension tensor1 0))
				(setf (aref tAux i) (+ (aref tensor1 i) (aref tensor2 i))))
			(if ((= (array-dimension tensor1 0) 1)
				(dotimes (i (array-dimension tensor2 0)
					(setf (aref tAux i) (+ tensor1 (aref tensor2 i))))))
				(if ((= (array-dimension tensor2 0) 1)
					(dotimes (i (array-dimension tensor2 0)
						(setf (aref tAux i) (+ tensor2 (aref tensor1 i)))))))))
	tAux)
)

(defmethod .- ())

(defmethod ./ ())

(defun .* (tensor1 tensor2)
	(if (not (= (array-dimensions tensor1) (array-dimensions tensor2)))
		(error "Tensors have incompatible dimensions -- .*"))
	(let ((tAux (tensor dim val)))
		(if (= (array-dimensions tensor1) (array-dimensions tensor2))
			(dotimes (i (array-dimension tensor1 0))
				(setf (aref tAux i) (* (aref tensor1 i) (aref tensor2 i))))
			(if ((= (array-dimension tensor1 0) 1)
				(dotimes (i (array-dimension tensor2 0)
					(setf (aref tAux i) (* tensor1 (aref tensor2 i))))))
				(if ((= (array-dimension tensor2 0) 1)
					(dotimes (i (array-dimension tensor2 0)
						(setf (aref tAux i) (* tensor2 (aref tensor1 i)))))))))
	tAux)
)

(defun .// (tensor1 tensor2)
	(if (not (= (array-dimensions tensor1) (array-dimensions tensor2)))
		(error "Tensors have incompatible dimensions -- .//"))
	(let ((tAux (tensor dim val)))
		(if (= (array-dimensions tensor1) (array-dimensions tensor2))
			(dotimes (i (array-dimension tensor1 0))
				(setf (aref tAux i) (// (aref tensor1 i) (aref tensor2 i))))
			(if ((= (array-dimension tensor1 0) 1)
				(dotimes (i (array-dimension tensor2 0)
					(setf (aref tAux i) (// tensor1 (aref tensor2 i))))))
				(if ((= (array-dimension tensor2 0) 1)
					(dotimes (i (array-dimension tensor2 0)
						(setf (aref tAux i) (// tensor2 (aref tensor1 i)))))))))
	tAux)
)

(defun .% (tensor1 tensor2)
	(if (not (= (array-dimensions tensor1) (array-dimensions tensor2)))
		(error "Tensors have incompatible dimensions -- .%"))
	(let ((tAux (tensor dim val)))
		(if (= (array-dimensions tensor1) (array-dimensions tensor2))
			(dotimes (i (array-dimension tensor1 0))
				(setf (aref tAux i) (% (aref tensor1 i) (aref tensor2 i))))
			(if ((= (array-dimension tensor1 0) 1)
				(dotimes (i (array-dimension tensor2 0)
					(setf (aref tAux i) (% tensor1 (aref tensor2 i))))))
				(if ((= (array-dimension tensor2 0) 1)
					(dotimes (i (array-dimension tensor2 0)
						(setf (aref tAux i) (% tensor2 (aref tensor1 i)))))))))
	tAux)
)

(defun .> (tensor1 tensor2)
	(if (not (= (array-dimensions tensor1) (array-dimensions tensor2)))
		(error "Tensors have incompatible dimensions -- .>"))
	(let ((tAux (tensor dim val)))
		(if (= (array-dimensions tensor1) (array-dimensions tensor2))
			(dotimes (i (array-dimension tensor1 0))
				(if (> (aref tensor1 i) (aref tensor2 i))
					(setf (aref tAux i) 1)
					(setf (aref tAux i) 0)))
			(if ((= (array-dimension tensor1 0) 1))
				(dotimes (i (array-dimension tensor2 0))
					(if (> tensor1 (aref tensor2 i))
						(setf (aref tAux i) 1)
						(setf (aref tAux i) 0)))
				(if ((= (array-dimension tensor2 0) 1))
					(dotimes (i (array-dimension tensor2 0))
						(if (> tensor2 (aref tensor1 i))
							(setf (aref tAux i) 1)
							(setf (aref tAux i) 0))))))
	tAux)
)

(defun .< (tensor1 tensor2)
	(if (not (= (array-dimensions tensor1) (array-dimensions tensor2)))
		(error "Tensors have incompatible dimensions -- .<"))
	(let ((tAux (tensor dim val)))
		(if (= (array-dimensions tensor1) (array-dimensions tensor2))
			(dotimes (i (array-dimension tensor1 0))
				(if (< (aref tensor1 i) (aref tensor2 i))
					(setf (aref tAux i) 1)
					(setf (aref tAux i) 0)))
			(if ((= (array-dimension tensor1 0) 1))
				(dotimes (i (array-dimension tensor2 0))
					(if (< tensor1 (aref tensor2 i))
						(setf (aref tAux i) 1)
						(setf (aref tAux i) 0)))
				(if ((= (array-dimension tensor2 0) 1))
					(dotimes (i (array-dimension tensor2 0))
						(if (< tensor2 (aref tensor1 i))
							(setf (aref tAux i) 1)
							(setf (aref tAux i) 0))))))
	tAux)
)

(defun .>= (tensor1 tensor2)
	(if (not (= (array-dimensions tensor1) (array-dimensions tensor2)))
		(error "Tensors have incompatible dimensions -- .>="))
	(let ((tAux (tensor dim val)))
		(if (= (array-dimensions tensor1) (array-dimensions tensor2))
			(dotimes (i (array-dimension tensor1 0))
				(if (>= (aref tensor1 i) (aref tensor2 i))
					(setf (aref tAux i) 1)
					(setf (aref tAux i) 0)))
			(if ((= (array-dimension tensor1 0) 1))
				(dotimes (i (array-dimension tensor2 0))
					(if (>= tensor1 (aref tensor2 i))
						(setf (aref tAux i) 1)
						(setf (aref tAux i) 0)))
				(if ((= (array-dimension tensor2 0) 1))
					(dotimes (i (array-dimension tensor2 0))
						(if (>= tensor2 (aref tensor1 i))
							(setf (aref tAux i) 1)
							(setf (aref tAux i) 0))))))
	tAux)
)

(defun .<= (tensor1 tensor2)
	(if (not (= (array-dimensions tensor1) (array-dimensions tensor2)))
		(error "Tensors have incompatible dimensions -- .<="))
	(let ((tAux (tensor dim val)))
		(if (= (array-dimensions tensor1) (array-dimensions tensor2))
			(dotimes (i (array-dimension tensor1 0))
				(if (<= (aref tensor1 i) (aref tensor2 i))
					(setf (aref tAux i) 1)
					(setf (aref tAux i) 0)))
			(if ((= (array-dimension tensor1 0) 1))
				(dotimes (i (array-dimension tensor2 0))
					(if (<= tensor1 (aref tensor2 i))
						(setf (aref tAux i) 1)
						(setf (aref tAux i) 0)))
				(if ((= (array-dimension tensor2 0) 1))
					(dotimes (i (array-dimension tensor2 0))
						(if (<= tensor2 (aref tensor1 i))
							(setf (aref tAux i) 1)
							(setf (aref tAux i) 0))))))
	tAux)
)

(defun .= (tensor1 tensor2)
	(if (not (= (array-dimensions tensor1) (array-dimensions tensor2)))
		(error "Tensors have incompatible dimensions -- .="))
	(let ((tAux (tensor dim val)))
		(if (= (array-dimensions tensor1) (array-dimensions tensor2))
			(dotimes (i (array-dimension tensor1 0))
				(if (= (aref tensor1 i) (aref tensor2 i))
					(setf (aref tAux i) 1)
					(setf (aref tAux i) 0)))
			(if ((= (array-dimension tensor1 0) 1))
				(dotimes (i (array-dimension tensor2 0))
					(if (= tensor1 (aref tensor2 i))
						(setf (aref tAux i) 1)
						(setf (aref tAux i) 0)))
				(if ((= (array-dimension tensor2 0) 1))
					(dotimes (i (array-dimension tensor2 0))
						(if (= tensor2 (aref tensor1 i))
							(setf (aref tAux i) 1)
							(setf (aref tAux i) 0))))))
	tAux)
)

(defun .or (tensor1 tensor2)
	(if (not (= (array-dimensions tensor1) (array-dimensions tensor2)))
		(error "Tensors have incompatible dimensions -- .or"))
	(let ((tAux (tensor dim val)))
		(if (= (array-dimensions tensor1) (array-dimensions tensor2))
			(dotimes (i (array-dimension tensor1 0))
				(if (or (aref tensor1 i) (aref tensor2 i))
					(setf (aref tAux i) 1)
					(setf (aref tAux i) 0)))
			(if ((= (array-dimension tensor1 0) 1))
				(dotimes (i (array-dimension tensor2 0))
					(if (or tensor1 (aref tensor2 i))
						(setf (aref tAux i) 1)
						(setf (aref tAux i) 0)))
				(if ((= (array-dimension tensor2 0) 1))
					(dotimes (i (array-dimension tensor2 0))
						(if (or tensor2 (aref tensor1 i))
							(setf (aref tAux i) 1)
							(setf (aref tAux i) 0))))))
	tAux)
)

(defun .and (tensor tensor2)
	(if (not (= (array-dimensions tensor1) (array-dimensions tensor2)))
		(error "Tensors have incompatible dimensions -- .and"))
	(let ((tAux (tensor dim val)))
		(if (= (array-dimensions tensor1) (array-dimensions tensor2))
			(dotimes (i (array-dimension tensor1 0))
				(if (and (aref tensor1 i) (aref tensor2 i))
					(setf (aref tAux i) 1)
					(setf (aref tAux i) 0)))
			(if ((= (array-dimension tensor1 0) 1))
				(dotimes (i (array-dimension tensor2 0))
					(if (and tensor1 (aref tensor2 i))
						(setf (aref tAux i) 1)
						(setf (aref tAux i) 0)))
				(if ((= (array-dimension tensor2 0) 1))
					(dotimes (i (array-dimension tensor2 0))
						(if (and tensor2 (aref tensor1 i))
							(setf (aref tAux i) 1)
							(setf (aref tAux i) 0))))))
	tAux)
)



	   